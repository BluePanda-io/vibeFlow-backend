module.exports = `
    

    type Project {
        _id: ID
        title: String
        description: String

        serverID: [String],

        champion: Members

        team: [teamType]

        role: [roleType]


        tweets: [tweetsType]

        collaborationLinks: [collaborationLinksType]

        stepsJoinProject: [String]

        budget: budgetType

        dates: datesType

        garden_teams: [Team]

    }

    type Team {
        _id: ID
        name: String
        description: String

        serverID: [String],
        projects: Project,
        members: [Members]
        champion: [Members]

        roles: [Role],
        epics: [Epic]

        categoryDiscordlD: String,
        channelGeneralDiscordID: String,
    }

    type Role {
        _id: ID
        name: String
        description: String

        serverID: [String],
        project: Project,
        members: [Members]
        teams: [Team]
    }

    type Epic {
         _id: ID
        name: String
        description: String

        phase: phaseEpicType

        champion: Members,

        serverID: [String],
        project: Project,
        teams: [Team],

        members: [Members],
        notifyUsers: [Members],
        author: Members

        channelDiscordlID: String,
    }


    type teamType {
        memberInfo: Members
        roleID: String
        phase: phaseType
    }

    enum phaseType {
        shortlisted
        engaged
        committed
        rejected
    }

    enum phaseEpicType {
        open
        archive
    }

    type skillRoleType {
        skillData: Skills
        level: String
        numEndorsement: String
        comment: String
    }

    type budgetType {
        token: String
        perHour: String
        totalBudget: String
    }



    type roleType {
        _id: ID
        title: String
        description: String

        skills: [skillRoleType]

        archive: Boolean
        dateRangeStart: String
        dateRangeEnd: String
        hoursPerWeek: Int
        budget: budgetType
    }

    
    type tweetsType {
        _id: ID
        title: String
        content: String
        author: Members
        registeredAt: String
        approved: Boolean,
    }

    type collaborationLinksType {
        title: String
        link: String
    }

    type datesType {
        kickOff: String
        complition: String
    }

    type tweetsProject {
        newTweetID: ID
        numTweets: Int
        tweets: [tweetsType]
    }

    type projectMatchType {
        projectData: Project
        matchPercentage: Float
        role: roleType
    }

    type projectUserMatchType {
        projectData: Project
        matchPercentage: Float
        skillsMatch: [Skills]
        skillsDontMatch: [Skills]
    }

    
    input newTweetProjectInput {
        projectID: ID,
        title: String,
        content: String,
        author: String,
        approved: Boolean,
    }

    input approveTweetInput {
        projectID: ID
        tweetID: ID
        approved: Boolean,
    }

    input changeTeamMember_Phase_ProjectInput {
        projectID: ID
        memberID: ID
        phase: phaseType,
    }

    input createNewTeamInput {
        _id: ID
        name: String
        description: String

        serverID: [String],
        projectID: String,
        memberID: [String]
        championID: [String]

        categoryDiscordlD: String,
        channelGeneralDiscordID: String,
    }

    input createNewRoleInput {
        _id: ID
        name: String
        description: String

        serverID: [String],
        projectID: ID,
        memberID: [String]
        teamID: [ID]
    }

    input createNewEpicInput {
        _id: ID
        name: String
        description: String

        phase: phaseEpicType

        championID: String,

        serverID: [String],
        projectID: ID,
        teamID: [ID],
        authorID: String,

        memberID: [String],
        notifyUserID: [String],

        channelDiscordlID: String,
    }

    



    input updateProjectInput {
        _id: ID
        
        title: String
        description: String
        serverID: [String]

        champion: String

        team: [teamInput]

        role: [roleInput]

        collaborationLinks: [collaborationLinksInput]

        stepsJoinProject: [String]

        budget: budgetInput

        dates: datesInput

    }

    input teamInput {
        memberID: String
        roleID: String
        phase: phaseType
        
    }

    input skillRoleInput {
        _id: String
        level: String
        numEndorsement: String
        comment: String
    }

    input budgetInput {
        totalBudget: String
        token: String
        perHour: String
    }



    input roleInput {
        _id: ID
        title: String
        description: String

        skills: [skillRoleInput]

        archive: Boolean
        dateRangeStart: String
        dateRangeEnd: String
        hoursPerWeek: Int
        budget: budgetInput
    }

    
    input tweetsInput {
        content: String
        author: String
    }

    input collaborationLinksInput {
        title: String
        link: String
    }

    input datesInput {
        kickOff: String
        complition: String
    }

    input findProjectInput {
        _id: ID
        serverID: [String]
    }
    input findProjectsInput {
        _id: [ID]
        serverID: [String]
    }
    input findProjects_RequireSkillInput {
        skillID: [ID]
        serverID: [String]
    }
    input findProjects_RecommendedToUserInput {
        memberID: ID
        serverID: [String]
    }
    input match_projectToUserInput {
        memberID: ID
        projectID: ID
        roleID: ID
        serverID: [String]
    }

    input findTeamsInput {
        _id: [ID]
        projectID: [ID]
        serverID: [String]
    }

    input findRolesInput {
        _id: [ID]
        serverID: [String]
        projectID: ID,
        teamID: [ID],
        
    }
    input findEpicInput {
        _id: [ID]
        serverID: [String]
        projectID: ID,
        teamID: [ID],
        
    }

    

    

`