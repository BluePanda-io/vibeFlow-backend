module.exports = `
    
    
    
    type Members {
        _id: ID
        
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        hoursPerWeek: Float,



        tweets: [String],
        skills: [Skills],
        projects: [projectMemberType],
        archiveProjects: [String],
        network: [Members],

        registeredAt: String,

        previusProjects: [previusProjectsType],

    }

    type previusProjectsType {
        title: String,
        description: String,
        link: String,
        picture: String,
        startDate: String,
        endDate: String,
    }

    type projectMemberType {
        info: Project,
        role: roleType,
        champion: Boolean
        phase: phaseType
    }
    

    type skillsType {
        id: String,
        authors: [Members],
        points: Float,
    }


    input findMemberInput {
        _id: ID
    }

    input findMembersInput {
        _id: [ID]
    }

    input addNewMemberInput {
        _id: ID
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        hoursPerWeek: Float,

        previusProjects: [previusProjectsInput],

    }


    input updateMemberInput {
        _id: ID
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        hoursPerWeek: Float,

        previusProjects: [previusProjectsInput],

    }

    input endorseAttributeInput {
        _id: ID
        attribute: attributeType

    }

    enum attributeType {
        organization
        collaboration
        management
        ownership
        flexibility
        decisiveness
        empathy
        leadership
    }

     input previusProjectsInput {
        title: String,
        description: String,
        link: String,
        picture: String,
        startDate: String,
        endDate: String,
    }

    input networkInput {
        memberID: String
        endorcment: [endorcmentInput]
    }

    input endorcmentInput {
        skillID: String
        registeredAt: String
    }

    input skillsUpdateMemberInput {
        skillID: String
        authors: String
        communityLevel: Float
        selfEndorsedLevel: Float
    }


    input addSkillToMember_Input {
        skillID: String
        memberID: String
        authorID: String
    }

    

`