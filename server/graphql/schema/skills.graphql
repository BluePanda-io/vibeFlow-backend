module.exports = `
    
    type Skills {
        _id: ID
        name: String,

        tweets: [String],
        members: [Members],
        authors: [Members],

        subCategorySkill: [SkillSubCategory],
        categorySkills: [SkillCategory],

        relatedSkills: [Skills],

        id_lightcast: String,

        registeredAt: String,
        state: approvedSkillEnum,
    }

    input findSkillsInput {
        _id: [ID]
    }

    input skills_autocompleteInput {
        search: String,
    }

    input findSkillInput {
        _id: ID
        id_lightcast: ID
    }

    input createSkillInput {
        name: String
        state: approvedSkillEnum 

        subCategorySkill: [ID],
        categorySkills: [ID],

        id_lightcast: String,
    }

    input createSkillsInput {
        names: [String]
        state: approvedSkillEnum 
    }

    input relatedSkillsInput {
        _id: ID
        relatedSkills_id: [ID]
    }

    input createApprovedSkillInput {
        name: String
    }

    input approveOrRejectSkillInput {
        _id: ID
        state: approvedSkillEnum
        categorySkills: [ID]
        subCategorySkill: [ID]
    }

    enum approvedSkillEnum {
        waiting
        rejected
        approved
    }

    enum SortableSkillFields {
        _id
        name
        registeredAt
    }

    enum SortDirection {
        ASC
        DESC
    }
    
    input findSkillsInputPaginated {
        request: findSkillsInput
        after: String
        before: String
        limit: Int
        sortBy: SortBySkill
    }

    input SortBySkill {
        field: SortableSkillFields,
        direction: SortDirection
    }


    type PaginatedSkills {
        data: [Skills]
        pageInfo: PageInfo
    }

    type PageInfo {
        hasNextPage : Boolean
        hasPrevPage: Boolean
        start : String
        end: String
    }

`